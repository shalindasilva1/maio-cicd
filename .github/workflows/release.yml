name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      IMAGE: ghcr.io/${{ github.repository }}:${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install
        run: pip install -r requirements-dev.txt

      - name: Train (v0.1 linear)
        run: |
          python -m ml.train --seed 42 --output-dir artifacts --version "${GITHUB_REF_NAME}"

      - name: Bake artifacts into app/
        run: |
          mkdir -p app/model
          cp artifacts/pipeline.pkl app/model/
          cp artifacts/feature_names.json app/model/
          cp artifacts/MODEL_VERSION app/model/

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: docker build -t "$IMAGE" .

      - name: Smoke test container
        run: |

          IMAGE_LOWER=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')

          cid="$(docker run -d -p 8080:8080 "$IMAGE_LOWER")"
          trap 'docker rm -f "$cid" >/dev/null 2>&1 || true' EXIT

          for i in $(seq 1 30); do
            if curl --fail -sS --no-progress-meter http://localhost:8080/health >/dev/null; then
              break
            fi
            sleep 1
          done

          curl --fail -sS --no-progress-meter -H "Accept: application/json" \
            http://localhost:8080/health | jq .

          curl --fail -sS --no-progress-meter -H "Content-Type: application/json" \
            -d '{"age":0.02,"sex":-0.044,"bmi":0.06,"bp":-0.03,"s1":-0.02,"s2":0.03,"s3":-0.02,"s4":0.02,"s5":0.02,"s6":-0.001}' \
            http://localhost:8080/predict | jq .

      - name: Push image
        run: docker push "$IMAGE"

      - name: Upload metrics artifact
        uses: actions/upload-artifact@v4
        with:
          name: metrics
          path: artifacts/metrics.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            Baseline v0.1 â€” StandardScaler + LinearRegression.
            Metrics attached as artifacts/metrics.json.
          files: |
            artifacts/metrics.json
